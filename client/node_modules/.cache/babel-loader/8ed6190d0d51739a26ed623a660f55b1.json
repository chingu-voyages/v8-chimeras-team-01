{"ast":null,"code":"import _classCallCheck from \"/media/luisthecoder/Code/v8-chimeras-team-01/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/luisthecoder/Code/v8-chimeras-team-01/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/media/luisthecoder/Code/v8-chimeras-team-01/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/media/luisthecoder/Code/v8-chimeras-team-01/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/media/luisthecoder/Code/v8-chimeras-team-01/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/media/luisthecoder/Code/v8-chimeras-team-01/client/src/components/Player/Player.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Peer from 'peerjs';\nimport history from '../../History.js';\nimport Questions from '../Questions';\nimport Results from '../Results';\nimport LeaderBoard from '../LeaderBoard';\nimport Instructions from '../Instructions';\nimport Join from './Join';\nimport './index.css';\n/**\n *\n *\n * @class Host\n * @extends {Component}\n */\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Player)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      peer: new Peer(null, {\n        debug: 2\n      }),\n      id: '',\n      me: {\n        userName: \"\",\n        myScore: 0\n      },\n      users: {},\n      questions: [],\n      currentQ: 0,\n      time: 10,\n      isConnected: false,\n      input: '',\n      conn: '',\n      whichGame: ''\n    };\n\n    _this.initialize = function () {\n      _this.state.peer.on('open', function (id) {\n        console.log(\"ID: \" + _this.state.peer.id);\n\n        _this.setState({\n          id: id\n        });\n      });\n\n      _this.state.peer.on('disconnected', function () {\n        //handle connection message\n        console.log(\"Connection lost. Please reconnect\");\n\n        _this.state.peer.reconnect();\n      });\n\n      _this.state.peer.on('close', function () {\n        _this.setState({\n          conn: null\n        });\n\n        console.log('Connection destroyed');\n      });\n\n      _this.state.peer.on('error', function (err) {\n        console.log(err);\n      });\n    };\n\n    _this.pushLocation = function (path) {\n      history.push(\"\".concat(path));\n    };\n\n    _this.incrementQ = function () {\n      var cQ = _this.state.currentQ;\n\n      _this.setState({\n        currentQ: cQ + 1\n      });\n    };\n\n    _this.setGame = function (game) {\n      _this.setState({\n        questions: game.questions\n      });\n    };\n\n    _this.sendAnswer = function (correct, answer, localScore) {\n      //Send data to Host\n      _this.sendChosenAnswer(correct, answer, localScore);\n    };\n\n    _this.sendChosenAnswer = function (correct, answer, localScore) {\n      if (_this.state.conn.open) {\n        var msg = {\n          individualResults: _this.state.me\n        };\n\n        _this.state.conn.send(msg);\n\n        console.log(\"Sent: \" + msg);\n      }\n    };\n\n    _this.handleConnection = function (id) {\n      var conn = _this.state.peer.connect(id, {\n        reliable: true\n      });\n\n      _this.setState({\n        conn: conn,\n        isConnected: true\n      }, function () {\n        _this.finishConnections();\n      });\n    };\n\n    _this.finishConnections = function () {\n      _this.state.conn.on('open', function () {\n        console.log(\"Connected to: \" + _this.state.conn.peer);\n        var firstMe = {\n          initialMe: _this.state.me\n        };\n\n        _this.state.conn.send(firstMe);\n      });\n\n      _this.state.conn.on('data', function (data) {\n        console.log(data);\n\n        _this.handleReceivedData(data);\n      });\n\n      _this.state.conn.on('close', function () {\n        _this.state.peer.destroy();\n\n        console.log(\"Connection closed\");\n      });\n    };\n\n    _this.handleReceivedData = function (data) {\n      switch (data) {\n        case \"start\":\n          _this.pushLocation(\"/player/questions\");\n\n          break;\n\n        case \"go Leaderboard\":\n          _this.pushLocation(\"/player/leaderboard\");\n\n          break;\n\n        case \"go Next Question\":\n          _this.pushLocation(\"/player/questions\");\n\n          break;\n\n        case \"Game Over\":\n          _this.pushLocation(\"/player/results\");\n\n          break;\n\n        case \"Rematch\":\n          console.log(\"handle rematch here\");\n          break;\n\n        default:\n          _this.catchOthers(data);\n\n          console.log(data);\n          break;\n      }\n\n      ;\n    };\n\n    _this.catchOthers = function (data) {\n      if (data.usersObject) {\n        _this.updateUsersObject(data);\n      } else if (data.whichGame) {\n        var whichGame = data.whichGame;\n\n        _this.loadQuestions(whichGame);\n      }\n    };\n\n    _this.updateUsersObject = function (data) {\n      _this.setState({\n        users: data.usersObject\n      });\n    };\n\n    _this.updateUsername = function (myName) {\n      var obj = {\n        userName: myName,\n        myScore: 0\n      };\n\n      _this.setState({\n        me: obj\n      });\n    };\n\n    _this.updateMyScore = function (score) {\n      var obj = {\n        myScore: score,\n        userName: _this.state.me.userName\n      };\n\n      _this.setState({\n        me: obj\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initialize();\n    }\n  }, {\n    key: \"loadQuestions\",\n    value: function loadQuestions(whichGame) {\n      var _this2 = this;\n\n      return fetch(\"/api/questions/\".concat(whichGame)).then(function (res) {\n        if (!res.ok) {\n          return Promise.reject(res.statusText);\n        }\n\n        return res.json();\n      }).then(function (data) {\n        return _this2.setState({\n          questions: data.questions\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n    /* PUSH URL */\n\n    /**\n     * @function pushLocation\n     * @arg {String}\n     * @description [Takes in a string that will be pushed as a URL path in the history stack, making the app 'navigate' to that URL and mount any corrosponding components.]\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"player-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, this.state.me.userName ? React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \" User Name: \", React.createElement(\"span\", {\n        className: \"orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, this.state.me.userName)) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Enter a User Name\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/player/join\",\n        render: function render() {\n          return React.createElement(Join, {\n            pushLocation: _this3.pushLocation,\n            updateUsername: _this3.updateUsername,\n            handleConnection: _this3.handleConnection,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/player/instructions\",\n        render: function render() {\n          return React.createElement(Instructions, {\n            users: _this3.state.users,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 259\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/player/questions\",\n        render: function render(props) {\n          return React.createElement(Questions, Object.assign({}, props, {\n            question: _this3.state.questions[_this3.state.currentQ],\n            onQ: _this3.state.currentQ + 1,\n            totalQ: _this3.state.questions.length,\n            handleIncrementQ: _this3.incrementQ,\n            pushLocation: _this3.pushLocation,\n            sendAnswer: _this3.sendAnswer,\n            updateMyScore: _this3.updateMyScore,\n            myScore: _this3.state.me.myScore,\n            updateHost: function updateHost() {},\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/player/leaderboard\",\n        render: function render(props) {\n          return React.createElement(LeaderBoard, Object.assign({}, props, {\n            users: _this3.state.users,\n            handleIncrementQ: _this3.incrementQ,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/player/results\",\n        render: function render(props) {\n          return React.createElement(Results, Object.assign({}, props, {\n            users: _this3.state.users,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nexport default Player;","map":{"version":3,"sources":["/media/luisthecoder/Code/v8-chimeras-team-01/client/src/components/Player/Player.js"],"names":["React","Component","Switch","Route","Peer","history","Questions","Results","LeaderBoard","Instructions","Join","Player","state","peer","debug","id","me","userName","myScore","users","questions","currentQ","time","isConnected","input","conn","whichGame","initialize","on","console","log","setState","reconnect","err","pushLocation","path","push","incrementQ","cQ","setGame","game","sendAnswer","correct","answer","localScore","sendChosenAnswer","open","msg","individualResults","send","handleConnection","connect","reliable","finishConnections","firstMe","initialMe","data","handleReceivedData","destroy","catchOthers","usersObject","updateUsersObject","loadQuestions","updateUsername","myName","obj","updateMyScore","score","fetch","then","res","ok","Promise","reject","statusText","json","catch","props","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Peer from 'peerjs';\n\nimport history from '../../History.js';\nimport Questions from '../Questions';\nimport Results from '../Results';\nimport LeaderBoard from '../LeaderBoard';\nimport Instructions from '../Instructions';\nimport Join from './Join';\n\nimport './index.css';\n\n/**\n *\n *\n * @class Host\n * @extends {Component}\n */\nclass Player extends Component {\n\n  /**\n  * @property { Object } me - User in this instance of game.\n  * @property { Array } users - Array of user objects.\n  * @property { Array } questions - Array of questions and answers.\n  * @property { Array }  answers - An array of possible answers.\n  * @property { Number } currentQ - Index of current question.\n  * @property { Number } time - How many seconds to set timer.\n  * @property { String } chosenAnswer - String holding chosen answer.\n  *\n  */\n  state = {\n    peer: new Peer(null, {\n      debug: 2\n    }),\n    id: '',\n    me: {\n      userName: \"\",\n      myScore: 0\n    },\n    users: {},\n    questions: [],\n    currentQ: 0,\n    time: 10,\n    isConnected: false,\n    input: '',\n    conn: '',\n    whichGame: ''\n  }\n\n  componentDidMount() {\n    this.initialize();\n  }\n\n  initialize = () => {\n\n    this.state.peer.on('open', (id) => {\n      console.log(\"ID: \" + this.state.peer.id);\n      this.setState({ id })\n    });\n\n    this.state.peer.on('disconnected', () => {\n      //handle connection message\n      console.log(\"Connection lost. Please reconnect\");\n      this.state.peer.reconnect();\n    });\n\n    this.state.peer.on('close', () => {\n      this.setState({ conn: null });\n      console.log('Connection destroyed');\n    });\n\n    this.state.peer.on('error', (err) => {\n      console.log(err);\n    })\n  }\n\n\n\n  loadQuestions(whichGame) {\n    return fetch(`/api/questions/${whichGame}`)\n      .then(res => {\n        if (!res.ok) {\n          return Promise.reject(res.statusText);\n        }\n        return res.json();\n      })\n      .then(data =>\n        this.setState({\n          questions: data.questions\n        })\n      )\n      .catch(err =>\n        console.log(err)\n      );\n  }\n\n  /* PUSH URL */\n  /**\n   * @function pushLocation\n   * @arg {String}\n   * @description [Takes in a string that will be pushed as a URL path in the history stack, making the app 'navigate' to that URL and mount any corrosponding components.]\n   */\n  pushLocation = (path) => {\n    history.push(`${path}`);\n  };\n\n  /* Increment Current Q */\n  /**\n   * @function incrementQ\n   * @description [Takes in number representing index of current question in questions array and adds one, in order to get next question in array.]\n   */\n  incrementQ = () => {\n    let cQ = this.state.currentQ;\n    this.setState({ currentQ: (cQ + 1) })\n  }\n\n  /* Set Game */\n  /**\n   * @function setGame\n   * @description [Takes in questions and answers from game selected in Games component and places them in the questions array in state.]\n   */\n  setGame = (game) => {\n    this.setState({ questions: game.questions });\n  }\n\n\n  /**\n   * @method sendAnswer - Function used to send computed answer to the Host.\n   *\n   * @memberof Questions\n   */\n  sendAnswer = (correct, answer, localScore) => {\n    //Send data to Host\n    this.sendChosenAnswer(correct, answer, localScore);\n  }\n\n  /**\n   * @method sendChosenAnswer - Function used to send slected answer to the Host.\n   */\n\n  sendChosenAnswer = (correct, answer, localScore) => {\n    if (this.state.conn.open) {\n      let msg = { individualResults: this.state.me };\n      this.state.conn.send(msg);\n      console.log(\"Sent: \" + msg);\n    }\n  }\n\n  handleConnection = (id) => {\n    let conn = this.state.peer.connect(id, {\n      reliable: true\n    });\n\n    this.setState({ conn, isConnected: true }, () => {\n      this.finishConnections();\n    })\n\n\n  }\n\n  finishConnections = () => {\n\n    this.state.conn.on('open', () => {\n      console.log(\"Connected to: \" + this.state.conn.peer);\n      let firstMe = { initialMe: this.state.me };\n      this.state.conn.send(firstMe);\n    });\n\n    this.state.conn.on('data', (data) => {\n      console.log(data);\n      this.handleReceivedData(data);\n    });\n\n    this.state.conn.on('close', () => {\n      this.state.peer.destroy();\n      console.log(\"Connection closed\");\n    });\n\n  }\n\n  handleReceivedData = (data) => {\n    switch (data) {\n      case \"start\":\n        this.pushLocation(\"/player/questions\");\n        break;\n      case \"go Leaderboard\":\n        this.pushLocation(\"/player/leaderboard\");\n        break;\n      case \"go Next Question\":\n        this.pushLocation(\"/player/questions\");\n        break;\n      case \"Game Over\":\n        this.pushLocation(\"/player/results\");\n        break;\n      case \"Rematch\":\n        console.log(\"handle rematch here\");\n        break;\n      default:\n        this.catchOthers(data);\n        console.log(data);\n        break;\n    };\n  }\n\n  /**\n   * @method catchOthers - Function used to receive score/results from host and update them\n   *\n   *\n   */\n\n  catchOthers = (data) => {\n\n    if (data.usersObject) {\n      this.updateUsersObject(data);\n    } else if (data.whichGame) {\n      let whichGame = data.whichGame\n      this.loadQuestions(whichGame);\n    }\n  }\n\n  updateUsersObject = (data) => {\n    this.setState({ users: data.usersObject })\n  }\n\n  updateUsername = (myName) => {\n    let obj = { userName: myName, myScore: 0 };\n    this.setState({ me: obj });\n  }\n\n  updateMyScore = (score) => {\n    var obj = { myScore: score, userName: this.state.me.userName };\n    this.setState({ me: obj });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <section className=\"player-header\">\n          {\n            this.state.me.userName ?\n              <h3> User Name: <span className=\"orange\">\n                {this.state.me.userName}\n              </span></h3> :\n              <h3><span className=\"orange\">Enter a User Name</span></h3>\n\n\n          }\n        </section>\n\n\n        < br />\n        <Switch>\n\n          <Route path=\"/player/join\" render={() => <Join pushLocation={this.pushLocation} updateUsername={this.updateUsername} handleConnection={this.handleConnection} />} />\n\n          <Route path=\"/player/instructions\"\n            render={() => <Instructions\n              users={this.state.users} />} />\n\n          <Route path=\"/player/questions\"\n            render={(props) =>\n              <Questions {...props}\n                question={this.state.questions[this.state.currentQ]}\n                onQ={this.state.currentQ + 1}\n                totalQ={this.state.questions.length}\n                handleIncrementQ={this.incrementQ}\n                pushLocation={this.pushLocation}\n                sendAnswer={this.sendAnswer}\n                updateMyScore={this.updateMyScore}\n                myScore={this.state.me.myScore}\n                updateHost={() => {}}\n              />\n            } />\n\n          <Route path=\"/player/leaderboard\"\n            render={(props) =>\n              <LeaderBoard {...props}\n                users={this.state.users}\n                handleIncrementQ={this.incrementQ} />\n            } />\n\n          <Route path=\"/player/results\"\n            render={(props) =>\n              <Results {...props}\n                users={this.state.users} />\n            } />\n\n        </Switch>\n      </div >\n\n    )\n  }\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}