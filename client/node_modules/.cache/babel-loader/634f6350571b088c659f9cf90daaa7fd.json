{"ast":null,"code":"import _objectSpread from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/client/src/components/Host/Host.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport history from '../../History.js';\nimport Peer from 'peerjs';\nimport Questions from '../Questions';\nimport Games from '../Games';\nimport Instructions from '../Instructions';\nimport LeaderBoard from '../LeaderBoard';\nimport Results from '../Results';\nimport GetStarted from './GetStarted';\nimport NextQuestion from './NextQuestion';\nimport './index.css';\n/**\n * @class Host\n * @extends {Component}\n */\n\nvar Host =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Host, _Component);\n\n  function Host() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Host);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Host)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      peer: new Peer(null, {\n        debug: 2\n      }),\n      conn: null,\n      players: [],\n      id: '',\n      playersUpdated: false,\n      me: null,\n      users: {},\n      questions: [],\n      currentQ: 0,\n      chosenAnswer: '',\n      readyLeaderBoard: false,\n      readyResults: false,\n      whichGame: '' // Connection functions\n\n    };\n\n    _this.initialize = function () {\n      _this.state.peer.on('open', function (id) {\n        console.log(\"ID: \" + _this.state.peer.id);\n\n        _this.setState({\n          id: id\n        });\n      });\n\n      _this.state.peer.on('connection', function (c) {\n        console.log(c);\n\n        _this.setState({\n          conn: c\n        });\n\n        var players = _toConsumableArray(_this.state.players);\n\n        players.push(_this.state.conn);\n\n        _this.setState({\n          players: players\n        });\n\n        console.log(\"Connected to: \" + _this.state.conn.peer);\n\n        _this.ready();\n\n        console.log(_this.state.players);\n      });\n\n      _this.state.peer.on('disconnected', function () {\n        //handle connection message\n        console.log(\"Connection lost. Please reconnect\");\n\n        _this.state.peer.reconnect();\n      });\n\n      _this.state.peer.on('close', function () {\n        _this.setState({\n          conn: null\n        });\n\n        console.log('Connection destroyed');\n      });\n\n      _this.state.peer.on('error', function (err) {\n        console.log(err);\n      });\n    };\n\n    _this.ready = function () {\n      _this.state.conn.on('data', function (data) {\n        _this.handleReceivedData(data);\n\n        console.log(\"Data received: \", data);\n      });\n\n      _this.state.conn.on('close', function () {\n        console.log(\"connection reset, awaiting connection...\");\n\n        var playerArray = _this.state.players.filter(function (obj) {\n          return obj.open;\n        });\n\n        _this.setState({\n          players: playerArray\n        });\n\n        _this.setState({\n          conn: null\n        });\n      });\n    };\n\n    _this.handleReceivedData = function (data) {\n      switch (data) {\n        default:\n          _this.catchOthers(data);\n\n          break;\n      }\n\n      ;\n    };\n\n    _this.catchOthers = function (data) {\n      if (data.individualResults) {\n        _this.updateResults(data);\n      } else if (data.initialMe) {\n        _this.initiateUsers(data);\n      }\n    };\n\n    _this.initiateHostUsers = function () {\n      var username = _this.state.me.userName;\n\n      var scoreObj = _defineProperty({}, username, _this.state.me.myScore);\n\n      _this.setState({\n        users: scoreObj\n      });\n    };\n\n    _this.initiateUsers = function (data) {\n      _this.updatePlayersScores(data.initialMe.userName, data.initialMe.myScore);\n\n      _this.state.players.forEach(function (conn) {\n        var obj = {\n          usersObject: _this.state.users\n        };\n        conn.send(obj);\n        console.log(\"sent users object\", obj);\n      });\n\n      _this.state.players.forEach(function (conn) {\n        var whichGame = {\n          whichGame: _this.state.whichGame\n        };\n        conn.send(whichGame);\n        console.log(\"sent whichGame object\", whichGame);\n      });\n    };\n\n    _this.pushLocation = function (path) {\n      history.push(\"\".concat(path));\n    };\n\n    _this.incrementQ = function () {\n      var cQ = _this.state.currentQ;\n\n      _this.setState({\n        currentQ: cQ + 1\n      });\n    };\n\n    _this.setGame = function (game) {\n      // To Do Clear all players and host scores\n      _this.setState({\n        questions: game.questions\n      });\n\n      _this.setState({\n        whichGame: game.id\n      });\n    };\n\n    _this.sendAnswer = function (correct, answer) {\n      // if there are no players connected, single player mode\n      //show leaderboard push button\n      // if last questions run\n      if (_this.state.players.length === 0) {\n        if (_this.state.questions.length === _this.state.currentQ + 1) {\n          _this.setState({\n            readyResults: true\n          });\n        } else {\n          _this.setState({\n            readyLeaderBoard: true\n          });\n        }\n\n        console.log(\"readyLeaderBoard\"); //update own score in users object\n\n        _this.initiateHostUsers();\n      }\n\n      console.log(\"sendAnswer\");\n    };\n\n    _this.updateResults = function (data) {\n      _this.updatePlayersScores(data.individualResults.userName, data.individualResults.myScore); //check if all results are received on initial join\n\n\n      if (Object.keys(_this.state.users).length === _this.state.players.length) {\n        //trigger host update users with own score\n        //by setting playersUpdated to true\n        // this.setState({ playersUpdated: true });\n        _this.updateHost();\n\n        console.log(\"players updated\");\n      }\n    };\n\n    _this.updateHost = function () {\n      _this.setState({\n        users: _objectSpread({}, _this.state.users, _defineProperty({}, _this.state.me.userName, _this.state.me.myScore))\n      });\n\n      _this.setState({\n        playersUpdated: false\n      });\n\n      _this.setState({\n        readyToSend: true\n      });\n    };\n\n    _this.updatePlayersScores = function (user, score) {\n      _this.setState({\n        users: _objectSpread({}, _this.state.users, _defineProperty({}, user, score))\n      });\n\n      console.log(_this.state.users);\n    };\n\n    _this.clearUsers = function () {\n      _this.setState({\n        users: {}\n      });\n    };\n\n    _this.handleLeaderBoardTransition = function () {\n      _this.state.players.forEach(function (conn) {\n        conn.send(\"go Leaderboard\");\n      });\n    };\n\n    _this.handleGetStarted = function () {\n      _this.state.players.forEach(function (conn) {\n        conn.send(\"start\");\n      });\n\n      _this.clearUsers();\n    };\n\n    _this.handleUsername = function (e) {\n      e.preventDefault();\n      var myName = e.target.userName.value;\n      var obj = {\n        myScore: 0,\n        userName: myName\n      };\n\n      _this.setState({\n        me: obj\n      }, function () {\n        return _this.initiateHostUsers();\n      });\n    };\n\n    _this.updateMyScore = function (score) {\n      var obj = {\n        myScore: score,\n        userName: _this.state.me.userName\n      };\n\n      _this.setState({\n        me: obj\n      });\n    };\n\n    _this.sendUserObject = function () {\n      _this.state.players.forEach(function (conn) {\n        var obj = {\n          usersObject: _this.state.users\n        };\n        conn.send(obj);\n\n        _this.setState({\n          readyToSend: false\n        });\n\n        console.log(\"sent users object\", obj);\n      });\n\n      _this.readyLeaderBoard();\n\n      console.log(\"sendUserObject\");\n    };\n\n    _this.goNextQuestion = function () {\n      _this.state.players.forEach(function (conn) {\n        conn.send(\"go Next Question\");\n      });\n\n      _this.pushLocation(\"/host/questions\");\n\n      _this.clearUsers();\n    };\n\n    _this.readyLeaderBoard = function () {\n      if (_this.state.questions.length === _this.state.currentQ + 1) {\n        _this.setState({\n          readyResults: true\n        });\n      } else {\n        _this.setState({\n          readyLeaderBoard: true\n        });\n      }\n    };\n\n    _this.goLeaderboard = function () {\n      _this.state.players.forEach(function (conn) {\n        conn.send(\"go Leaderboard\");\n      });\n\n      _this.pushLocation(\"/host/leaderboard\");\n\n      _this.unreadyLeaderBoard();\n    };\n\n    _this.goResults = function () {\n      _this.state.players.forEach(function (conn) {\n        conn.send(\"Game Over\");\n      });\n\n      _this.pushLocation(\"/host/results\");\n\n      _this.unreadyLeaderBoard();\n    };\n\n    _this.unreadyLeaderBoard = function () {\n      _this.setState({\n        readyLeaderBoard: false,\n        readyResults: false\n      });\n\n      console.log(\"unreadyLeaderBoard\");\n    };\n\n    _this.copyToClipboard = function (target) {\n      var text = document.getElementById(target).innerText.trim();\n      navigator.clipboard.writeText(text).then(function () {\n        alert(\"Copied!\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Host, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initialize();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.readyToSend === true) {\n        this.sendUserObject();\n        this.setState({\n          readyToSend: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        id: \"host-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"host-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, this.state.me ? React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, \" User Name: \", React.createElement(\"span\", {\n        className: \"orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, this.state.me.userName)) : React.createElement(\"div\", {\n        id: \"host-userName-form\",\n        className: \"fbc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"fbc\",\n        onSubmit: this.handleUsername,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"huf-input\",\n        name: \"userName\",\n        placeholder: \"What should we call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"huf-button pointy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, \"Submit\"))), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      }, \"Game ID:\", React.createElement(\"span\", {\n        className: \"orange pointy\",\n        id: \"game-id\",\n        onClick: function onClick() {\n          _this2.copyToClipboard(\"game-id\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, \" \", this.state.id)), React.createElement(\"h3\", {\n        className: \"hh-subtext pm0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, \"click to copy, share so friends can join\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/host/games\",\n        render: function render(props) {\n          return React.createElement(Games, Object.assign({}, props, {\n            showGames: true,\n            handleSetGame: _this2.setGame,\n            pushLocation: _this2.pushLocation,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 397\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/host/instructions\",\n        render: function render() {\n          return React.createElement(Instructions, {\n            getStarted: React.createElement(GetStarted, {\n              handleGetStarted: _this2.handleGetStarted,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 405\n              },\n              __self: this\n            }),\n            users: _this2.state.users,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 404\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/host/questions\",\n        render: function render(props) {\n          return React.createElement(Questions, Object.assign({}, props, {\n            question: _this2.state.questions[_this2.state.currentQ],\n            onQ: _this2.state.currentQ + 1,\n            totalQ: _this2.state.questions.length,\n            pushLocation: _this2.pushLocation,\n            sendAnswer: _this2.sendAnswer,\n            myScore: _this2.state.me.myScore,\n            updateMyScore: _this2.updateMyScore,\n            updateHost: _this2.updateHost,\n            playersUpdated: _this2.state.playersUpdated,\n            goLeaderboard: _this2.goLeaderboard,\n            readyLeaderBoard: _this2.state.readyLeaderBoard,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 411\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/host/leaderboard\",\n        render: function render(props) {\n          return React.createElement(LeaderBoard, Object.assign({}, props, {\n            users: _this2.state.users,\n            hostReady: true,\n            handleIncrementQ: _this2.incrementQ,\n            nextQuestion: React.createElement(NextQuestion, {\n              goNextQuestion: _this2.goNextQuestion,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 432\n              },\n              __self: this\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 428\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/host/results\",\n        render: function render(props) {\n          return React.createElement(Results, Object.assign({}, props, {\n            users: _this2.state.users,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 441\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      })), !!this.state.readyLeaderBoard && React.createElement(\"button\", {\n        class: \"host-next__btn\",\n        onClick: this.goLeaderboard,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      }, \"go leaderboard\"), !!this.state.readyResults && React.createElement(\"button\", {\n        class: \"host-next__btn\",\n        onClick: this.goResults,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      }, \"go results\"));\n    }\n  }]);\n\n  return Host;\n}(Component);\n\nexport default Host;","map":{"version":3,"sources":["/Users/Z/Projects/WebDev/Chingu/v8-chimeras-team-01/client/src/components/Host/Host.js"],"names":["React","Component","Switch","Route","history","Peer","Questions","Games","Instructions","LeaderBoard","Results","GetStarted","NextQuestion","Host","state","peer","debug","conn","players","id","playersUpdated","me","users","questions","currentQ","chosenAnswer","readyLeaderBoard","readyResults","whichGame","initialize","on","console","log","setState","c","push","ready","reconnect","err","data","handleReceivedData","playerArray","filter","obj","open","catchOthers","individualResults","updateResults","initialMe","initiateUsers","initiateHostUsers","username","userName","scoreObj","myScore","updatePlayersScores","forEach","usersObject","send","pushLocation","path","incrementQ","cQ","setGame","game","sendAnswer","correct","answer","length","Object","keys","updateHost","readyToSend","user","score","clearUsers","handleLeaderBoardTransition","handleGetStarted","handleUsername","e","preventDefault","myName","target","value","updateMyScore","sendUserObject","goNextQuestion","goLeaderboard","unreadyLeaderBoard","goResults","copyToClipboard","text","document","getElementById","innerText","trim","navigator","clipboard","writeText","then","alert","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport history from '../../History.js';\nimport Peer from 'peerjs';\nimport Questions from '../Questions';\nimport Games from '../Games';\nimport Instructions from '../Instructions';\nimport LeaderBoard from '../LeaderBoard';\nimport Results from '../Results';\n\nimport GetStarted from './GetStarted';\nimport NextQuestion from './NextQuestion';\n\n\nimport './index.css';\n\n/**\n * @class Host\n * @extends {Component}\n */\nclass Host extends Component {\n\n  /**\n  * @property { Object } me - User in this instance of game.\n  * @property { Array } users - Array of user objects.\n  * @property { Array } questions - Array of questions and answers.\n  * @property { Array }  answers - An array of possible answers.\n  * @property { Number } currentQ - Index of current question.\n  * @property { Number } time - How many seconds to set timer.\n  * @property { String } chosenAnswer - String holding chosen answer.\n  *\n  */\n\n  state = {\n    peer: new Peer(null, {\n      debug: 2\n    }),\n    conn: null,\n    players: [],\n    id: '',\n    playersUpdated: false,\n    me: null,\n    users: {},\n    questions: [],\n    currentQ: 0,\n    chosenAnswer: '',\n    readyLeaderBoard: false,\n    readyResults: false,\n    whichGame: ''\n  }\n\n\n\n\n  // Connection functions\n  componentDidMount() {\n    this.initialize();\n  }\n\n  componentDidUpdate() {\n\n    if (this.state.readyToSend === true) {\n      this.sendUserObject();\n      this.setState({ readyToSend: false });\n    }\n\n  }\n\n  initialize = () => {\n\n    this.state.peer.on('open', (id) => {\n      console.log(\"ID: \" + this.state.peer.id);\n      this.setState({ id })\n\n    });\n\n    this.state.peer.on('connection', (c) => {\n      console.log(c)\n      this.setState({ conn: c });\n      let players = [...this.state.players];\n      players.push(this.state.conn);\n      this.setState({ players });\n      console.log(\"Connected to: \" + this.state.conn.peer);\n      this.ready()\n      console.log(this.state.players);\n    });\n\n    this.state.peer.on('disconnected', () => {\n      //handle connection message\n      console.log(\"Connection lost. Please reconnect\");\n      this.state.peer.reconnect();\n    });\n\n    this.state.peer.on('close', () => {\n      this.setState({ conn: null });\n      console.log('Connection destroyed');\n    });\n\n    this.state.peer.on('error', (err) => {\n      console.log(err);\n    })\n  }\n\n  ready = () => {\n    this.state.conn.on('data', (data) => {\n      this.handleReceivedData(data);\n      console.log(\"Data received: \", data);\n    })\n\n    this.state.conn.on('close', () => {\n      console.log(\"connection reset, awaiting connection...\");\n      let playerArray = this.state.players.filter( obj => obj.open);\n      this.setState({ players : playerArray });\n      this.setState({ conn: null });\n    })\n  }\n\n\n  handleReceivedData = (data) => {\n    switch (data) {\n\n      default:\n        this.catchOthers(data);\n        break;\n    };\n  }\n\n  catchOthers = (data) => {\n    if (data.individualResults) {\n      this.updateResults(data);\n    } else if (data.initialMe) {\n      this.initiateUsers(data);\n    }\n  }\n  //End connection functions\n\n\n  // Initialize  Host And Players\n  initiateHostUsers = () => {\n    let username = this.state.me.userName;\n    let scoreObj = { [username]: this.state.me.myScore };\n    this.setState({ users: scoreObj });\n  }\n\n  initiateUsers = (data) => {\n    this.updatePlayersScores(data.initialMe.userName, data.initialMe.myScore);\n    this.state.players.forEach(conn => {\n      let obj = { usersObject: this.state.users };\n      conn.send(obj);\n      console.log(\"sent users object\", obj);\n    });\n    this.state.players.forEach(conn => {\n      let whichGame = { whichGame: this.state.whichGame };\n      conn.send(whichGame);\n      console.log(\"sent whichGame object\", whichGame);\n    });\n  }\n  // End Initialize Host And Players functions\n\n\n\n  /* PUSH URL */\n  /**\n   * @function pushLocation\n   * @arg {String}\n   * @description [Takes in a string that will be pushed as a URL path in the history stack, making the app 'navigate' to that URL and mount any corrosponding components.]\n   */\n  pushLocation = (path) => {\n    history.push(`${path}`);\n  };\n\n  /* Increment Current Q */\n  /**\n   * @function incrementQ\n   * @description [Takes in number representing index of current question in questions array and adds one, in order to get next question in array.]\n   */\n  incrementQ = () => {\n    let cQ = this.state.currentQ;\n    this.setState({ currentQ: (cQ + 1) })\n  }\n\n  /* Set Game */\n  /**\n   * @function setGame\n   * @description [Takes in questions and answers from game selected in Games component and places them in the questions array in state.]\n   */\n  setGame = (game) => {\n    // To Do Clear all players and host scores\n    this.setState({ questions: game.questions });\n    this.setState({ whichGame: game.id});\n  }\n\n  /**\n   * @method sendAnswer - Function used to send computed answer to the Host.\n   *\n   * @memberof Questions\n   */\n  sendAnswer = (correct, answer) => {\n    // if there are no players connected, single player mode\n    //show leaderboard push button\n    // if last questions run\n    if (this.state.players.length === 0) {\n\n      if (this.state.questions.length === this.state.currentQ + 1) {\n        this.setState({ readyResults: true })\n      } else {\n        this.setState({ readyLeaderBoard: true });\n      }\n\n      console.log(\"readyLeaderBoard\");\n\n      //update own score in users object\n      this.initiateHostUsers();\n\n    }\n\n    console.log(\"sendAnswer\");\n\n  }\n\n  updateResults = (data) => {\n\n    this.updatePlayersScores(data.individualResults.userName, data.individualResults.myScore);\n\n    //check if all results are received on initial join\n    if (Object.keys(this.state.users).length === this.state.players.length) {\n      //trigger host update users with own score\n      //by setting playersUpdated to true\n      // this.setState({ playersUpdated: true });\n      this.updateHost();\n      console.log(\"players updated\");\n    }\n  }\n\n  updateHost = () => {\n\n    this.setState({\n      users: {\n        ...this.state.users,\n        [this.state.me.userName]: this.state.me.myScore,\n      },\n    });\n    this.setState({ playersUpdated: false });\n\n    this.setState({ readyToSend: true });\n  }\n\n  updatePlayersScores = (user, score) => {\n    this.setState({\n      users: {\n        ...this.state.users,\n        [user]: score,\n      },\n    });\n    console.log(this.state.users);\n  }\n\n\n  clearUsers = () => {\n    this.setState({ users: {} })\n  }\n\n  handleLeaderBoardTransition = () => {\n\n    this.state.players.forEach(conn => {\n      conn.send(\"go Leaderboard\");\n    });\n\n  }\n\n  handleGetStarted = () => {\n\n    this.state.players.forEach(conn => {\n      conn.send(\"start\");\n    });\n    this.clearUsers();\n\n  }\n\n  handleUsername = (e) => {\n    e.preventDefault();\n    let myName = e.target.userName.value;\n    let obj = { myScore: 0, userName: myName }\n    this.setState({ me: obj }, () => this.initiateHostUsers());\n\n  }\n\n  updateMyScore = (score) => {\n    var obj = { myScore: score, userName: this.state.me.userName }\n    this.setState({ me: obj })\n  }\n\n  sendUserObject = () => {\n\n    this.state.players.forEach(conn => {\n      let obj = { usersObject: this.state.users };\n      conn.send(obj);\n      this.setState({ readyToSend: false });\n      console.log(\"sent users object\", obj);\n    });\n\n\n    this.readyLeaderBoard();\n\n    console.log(\"sendUserObject\");\n  }\n\n  goNextQuestion = () => {\n    this.state.players.forEach(conn => {\n      conn.send(\"go Next Question\");\n    });\n    this.pushLocation(\"/host/questions\");\n    this.clearUsers();\n  }\n\n  readyLeaderBoard = () => {\n    if (this.state.questions.length === this.state.currentQ + 1) {\n      this.setState({ readyResults: true })\n    } else {\n      this.setState({ readyLeaderBoard: true });\n    }\n  }\n\n  goLeaderboard = () => {\n    this.state.players.forEach(conn => {\n      conn.send(\"go Leaderboard\");\n    });\n    this.pushLocation(\"/host/leaderboard\");\n    this.unreadyLeaderBoard();\n  }\n\n  goResults = () => {\n    this.state.players.forEach(conn => {\n      conn.send(\"Game Over\");\n    });\n\n    this.pushLocation(\"/host/results\");\n    this.unreadyLeaderBoard();\n  }\n\n  unreadyLeaderBoard = () => {\n    this.setState({ readyLeaderBoard: false, readyResults: false });\n    console.log(\"unreadyLeaderBoard\");\n  }\n\n  /**\n   * @function copyToClipboard\n   * @description [copies selection to clipboard.]\n   */\n  copyToClipboard = (target) => {\n    let text = document.getElementById(target).innerText.trim();\n    navigator.clipboard.writeText(text).then(() => {\n      alert(\"Copied!\");\n    });\n\n  }\n\n  render() {\n\n    return (\n      <div id=\"host-container\">\n\n        <section className=\"host-header\">\n          {\n            this.state.me ?\n              <h3> User Name: <span className=\"orange\">\n                {this.state.me.userName}\n              </span></h3> :\n              <div id=\"host-userName-form\" className=\"fbc\">\n                <form className=\"fbc\"\n                  onSubmit={this.handleUsername}>\n                  <input type=\"text\"\n                    className=\"huf-input\"\n                    name=\"userName\"\n                    placeholder='What should we call you?' />\n                  <button type='submit'\n                    className=\"huf-button pointy\">Submit</button>\n                </form>\n              </div>\n          }\n\n          <h3>Game ID:\n            <span className=\"orange pointy\"\n              id=\"game-id\"\n              onClick={() => { this.copyToClipboard(\"game-id\") }}> {this.state.id}\n            </span></h3>\n          <h3 className=\"hh-subtext pm0\">click to copy, share so friends can join</h3>\n        </section>\n\n        <br />\n\n        <Switch>\n\n          <Route path=\"/host/games\"\n            render={(props) =>\n              <Games {...props}\n                showGames={true}\n                handleSetGame={this.setGame}\n                pushLocation={this.pushLocation} />\n            } />\n\n          <Route path=\"/host/instructions\"\n            render={() => <Instructions\n              getStarted={<GetStarted handleGetStarted={this.handleGetStarted} />}\n              users={this.state.users} />}\n          />\n\n          <Route path=\"/host/questions\"\n            render={(props) =>\n              <Questions {...props}\n                question={this.state.questions[this.state.currentQ]}\n                onQ={this.state.currentQ + 1}\n                totalQ={this.state.questions.length}\n                pushLocation={this.pushLocation}\n                sendAnswer={this.sendAnswer}\n                myScore={this.state.me.myScore}\n                updateMyScore={this.updateMyScore}\n                updateHost={this.updateHost}\n                playersUpdated={this.state.playersUpdated}\n                goLeaderboard={this.goLeaderboard}\n                readyLeaderBoard={this.state.readyLeaderBoard}\n              />\n            } />\n\n          <Route path=\"/host/leaderboard\"\n            render={(props) =>\n              <LeaderBoard {...props}\n                users={this.state.users}\n                hostReady={true}\n                handleIncrementQ={this.incrementQ}\n                nextQuestion={<NextQuestion\n                  goNextQuestion={this.goNextQuestion}\n                />}\n\n              />\n            } />\n\n          <Route path=\"/host/results\"\n            render={(props) =>\n              <Results {...props}\n                users={this.state.users} />\n            } />\n\n        </Switch>\n        {(!!this.state.readyLeaderBoard) && <button class=\"host-next__btn\" onClick={this.goLeaderboard}>go leaderboard</button>}\n        {(!!this.state.readyResults) && <button class=\"host-next__btn\" onClick={this.goResults}>go results</button>}\n\n      </div >\n\n    )\n  }\n}\n\nexport default Host;\n"]},"metadata":{},"sourceType":"module"}